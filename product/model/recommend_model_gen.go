// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	recommendFieldNames          = builder.RawFieldNames(&Recommend{})
	recommendRows                = strings.Join(recommendFieldNames, ",")
	recommendRowsExpectAutoSet   = strings.Join(stringx.Remove(recommendFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	recommendRowsWithPlaceHolder = strings.Join(stringx.Remove(recommendFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheRecommendIdPrefix = "cache:recommend:id:"
)

type (
	recommendModel interface {
		Insert(ctx context.Context, data *Recommend) (sql.Result, error)
		FindAll(ctx context.Context) ([]Recommend, error)
		FindOne(ctx context.Context, id int64) (*Recommend, error)
		Update(ctx context.Context, data *Recommend) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRecommendModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Recommend struct {
		Id         int64     `db:"id"`
		ProductId  int64     `db:"productId"`   // 产品ID
		CreateTime time.Time `db:"create_time"` // 推荐时间
	}
)

func newRecommendModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRecommendModel {
	return &defaultRecommendModel{
		conn:conn,
		table:      "`recommend`",
	}
}

func (m *defaultRecommendModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRecommendModel) FindAll(ctx context.Context) ([]Recommend, error) {
	query := fmt.Sprintf("select %s from %s", recommendRows, m.table)
	var resp []Recommend
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRecommendModel) FindOne(ctx context.Context, id int64) (*Recommend, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", recommendRows, m.table)
	var resp Recommend
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRecommendModel) Insert(ctx context.Context, data *Recommend) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, recommendRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProductId)
	return ret, err
}

func (m *defaultRecommendModel) Update(ctx context.Context, data *Recommend) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, recommendRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.Id)
	return err
}

func (m *defaultRecommendModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheRecommendIdPrefix, primary)
}

func (m *defaultRecommendModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", recommendRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRecommendModel) tableName() string {
	return m.table
}
